import psycopg2
import csv

import os

conn = psycopg2.connect(
    database = "phonebook",
    user = "postgres",
    password = "071106",
    host = "localhost",
    port = "5432"
)

cur = conn.cursor()

# –∏–∑ —Ü—Å–≤ –≤ –±–¥
def insert_from_csv(file_path):
    with open(file_path, 'r') as f:
        reader = csv.reader(f)
        for row in reader:
            cur.execute("INSERT INTO contacts (name, phone) VALUES (%s, %s)", (row[0], row[1]))
    conn.commit()
    print("üì• CSV –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ “õ–æ—Å—ã–ª–¥—ã.")





# –≤—Ä—É—á—É–Ω—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å –±–¥
def insert_from_input():
    name = input("–ê—Ç—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑: ")
    phone = input("–¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ: ")
    cur.execute("INSERT INTO contacts (name, phone) VALUES (%s, %s)", (name, phone))
    conn.commit()
    print("‚úÖ –ñ–∞“£–∞ –∫–æ–Ω—Ç–∞–∫—Ç “õ–æ—Å—ã–ª–¥—ã.")




# –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
def update_contact():
    contact_id = input("“ö–∞–π ID –∂–∞“£–∞—Ä—Ç–∞—Å—ã“£? ")
    new_name = input("–ñ–∞“£–∞ –∞—Ç—ã: ")
    new_phone = input("–ñ–∞“£–∞ —Ç–µ–ª–µ—Ñ–æ–Ω: ")
    cur.execute("UPDATE contacts SET name = %s, phone = %s WHERE id = %s", (new_name, new_phone, contact_id))
    conn.commit()
    print("‚ôªÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã.")




#–∏—Å–∫–∞—Ç—å –∫–æ–Ω—Ç–∫
def query_with_filter():
    keyword = input("–ê—Ç—ã –Ω–µ –Ω–æ–º–µ—Ä –±–æ–π—ã–Ω—à–∞ —ñ–∑–¥–µ: ")
    cur.execute("SELECT * FROM contacts WHERE name ILIKE %s OR phone ILIKE %s", (f'%{keyword}%', f'%{keyword}%'))
    rows = cur.fetchall()
    for row in rows:
        print(row)



#—É–¥–∞–ª—Ç—å

def delete_contact():
    contact_id = input("“ö–∞–π ID ”©—à—ñ—Ä–≥—ñ“£ –∫–µ–ª–µ–¥—ñ? ")
    cur.execute("DELETE FROM contacts WHERE id = %s", (contact_id,))
    conn.commit()
    print("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç ”©—à—ñ—Ä—ñ–ª–¥—ñ.")

#–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
def show_all_contacts():
    cur.execute("SELECT * FROM contacts")
    rows = cur.fetchall()
    if rows:
        print("\nüìã –ë–∞—Ä–ª—ã“õ –∫–æ–Ω—Ç–∞–∫—Ç—Ç–∞—Ä:")
        for row in rows:
            print(f"ID: {row[0]}, –ê—Ç—ã: {row[1]}, –¢–µ–ª: {row[2]}")
    else:
        print("üîç –ö–æ–Ω—Ç–∞–∫—Ç—Ç–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã.")

def search_by_pattern():
    pattern = input("–Ü–∑–¥–µ—É “Ø–ª–≥—ñ—Å—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–∞—Ç—ã/–Ω”©–º—ñ—Ä—ñ): ")
    cur.execute("SELECT * FROM search_contacts(%s)", (pattern,))
    rows = cur.fetchall()
    if rows:
        print("üîé –¢–∞–±—ã–ª“ì–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç—Ç–∞—Ä:")
        for row in rows:
            print(f"ID: {row[0]}, –ê—Ç—ã: {row[1]}, –¢–µ–ª: {row[2]}")
    else:
        print("‚ùå –ï—à—Ç–µ“£–µ —Ç–∞–±—ã–ª–º–∞–¥—ã.")

def add_or_update_contact():
    name = input("–ê—Ç—ã: ")
    phone = input("–¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ: ")
    cur.execute("SELECT add_or_update_contact(%s, %s)", (name, phone))
    conn.commit()
    print("‚úÖ “ö–æ—Å—ã–ª–¥—ã –Ω–µ–º–µ—Å–µ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã.")

def add_multiple_contacts():
    count = int(input("“ö–∞–Ω—à–∞ –∫–æ–Ω—Ç–∞–∫—Ç “õ–æ—Å“õ—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ? "))
    names = []
    phones = []
    for _ in range(count):
        name = input("–ê—Ç—ã: ")
        phone = input("–¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ: ")
        names.append(name)
        phones.append(phone)
    cur.execute("SELECT add_multiple_contacts(%s, %s)", (names, phones))
    conn.commit()
    print("üì• –ë–∞—Ä–ª—ã“õ –∫–æ–Ω—Ç–∞–∫—Ç—Ç–∞—Ä ”©“£–¥–µ–ª–¥—ñ (“õ–∞—Ç–µ –Ω”©–º—ñ—Ä–ª–µ—Ä - NOTICE-—Ç–µ).")
#11
def getDataFromPagination():
    print("\nüìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        limit = int(input("–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ") or 3)
        page = int(input("–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1): ") or 1)
        offset = (page - 1) * limit
        
        # –ü—Ä—è–º–æ–π SQL-–∑–∞–ø—Ä–æ—Å —Å LIMIT –∏ OFFSET
        cur.execute("""
            SELECT id, name, phone 
            FROM contacts 
            ORDER BY id 
            LIMIT %s OFFSET %s
        """, (limit, offset))
        
        contacts = cur.fetchall()
        
        if not contacts:
            print("\nüîç –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}:")
        for idx, contact in enumerate(contacts, start=1):
            print(f"{idx}. ID: {contact[0]}, –ê—Ç—ã: {contact[1]}, –¢–µ–ª: {contact[2]}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        cur.execute("SELECT COUNT(*) FROM contacts")
        total = cur.fetchone()[0]
        print(f"\n–í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {total}")
        print(f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {max(1, (total + limit - 1) // limit)}")
        
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
def check_contact(name):
    cur.execute("SELECT * FROM contacts WHERE name = %s", (name,))
    print(f"–ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç—ã: {cur.fetchall()}")

def delete_contact_by_name_or_phone():
    print("\n–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
    print("1 - –ü–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏.")
    print("2 - –ü–æ —Ç–æ—á–Ω–æ–º—É –Ω–æ–º–µ—Ä—É")
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ (1/2): ")
    
    if choice == '1':
        name = input("–í–≤–µ–¥–∏—Ç–µ –¢–û–ß–ù–û–ï –∏–º—è: ").strip()
        check_contact(name)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        
        try:
            # –ü—Ä—è–º–æ–π SQL-–∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∞
            cur.execute("DELETE FROM contacts WHERE name = %s RETURNING id", (name,))
            deleted = cur.fetchone()
            
            if deleted:
                conn.commit()
                print(f"–£–¥–∞–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç ID: {deleted[0]}")
            else:
                conn.rollback()
                print("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                
        except Exception as e:
            conn.rollback()
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    
    elif choice == '2':
        phone = input("–í–≤–µ–¥–∏—Ç–µ –¢–û–ß–ù–´–ô –Ω–æ–º–µ—Ä: ").strip()
        try:
            cur.execute("DELETE FROM contacts WHERE phone = %s RETURNING *", (phone,))
            result = cur.fetchone()
            
            if result:
                conn.commit()
                print(f"–£–¥–∞–ª–µ–Ω: ID {result[0]}, –ò–º—è: {result[1]}")
            else:
                print("–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                conn.rollback()
                
        except Exception as e:
            conn.rollback()
            print(f"–û—à–∏–±–∫–∞: {e}")

def menu():
    run = True
    while run:
        print("\nüì± PHONEBOOK MENU:")
        print("1 - insert csv")
        print("2 - from input")
        print("3 - update contact")
        print("4 - query with filter")
        print("5 - delete contact")
        print("6 - break")
        print("7 - show all contacts")
        print("8 - search by pattern (SQL function)")
        print("9 - add/update (SQL procedure)")
        print("10 - add many (SQL procedure)")
        print("11 - pagination")
        print("12 - delete by name or phone (SQL proc)")

        
        
        choice = input("–¢–∞“£–¥–∞“£—ã–∑ (1‚Äì12): ")

        if choice == '1':
            insert_from_csv('/Users/ajbynkumargali/Desktop/projects_pp2/lab10/db/ph.csv')
            
        elif choice == '2':
            insert_from_input()

        elif choice == '3':
            update_contact()

        elif choice == '4':
            query_with_filter()

        elif choice == '5':
            delete_contact()

        elif choice == '6':
            run = False
        elif choice == '7':
            show_all_contacts()
        elif choice == '8':
            search_by_pattern()
        elif choice == '9':
            add_or_update_contact()
        elif choice == '10':
            add_multiple_contacts()
        elif choice == '11':
            getDataFromPagination()
        elif choice == '12':
            delete_contact_by_name_or_phone()

        else:
            print("‚ùó “ö–∞—Ç–µ —Ç–∞“£–¥–∞—É.")
    

menu()
cur.close()
conn.close()